import glob
import re

## TODO add configuration file for enzyme, various stacks parameters
## TODO add ustacks
## TODO add cstacks
## TODO add sstacks
## TODO add QC steps, visualization?
## TODO add parameter tuning using the various samples


#USER_NAMES, FLOWCELLS, FASTQS = glob_wildcards("{user_name}/{flowcell}/{sll_fastq}.fastq.gz")
USER_NAMES, FLOWCELLS, FASTQS = [], [], []
for input_file in glob.glob("*/*/*.fastq*"):
    # Old-style NGI Sthlm naming format
    # Standard Illumina naming format
    m = re.search(r'(P\d{4}-\d{3}_\w{2}_L\d{3}_R[12]_\d{3}.fastq(.gz)?)', input_file)
    if not m:
        m = re.search(r'([\w-]+)/([\w-]+)/(\d_\d{6}_\w+_(P\d{4}_\d{3})_[12].fastq(.gz?))', input_file)
    if m:
        groups = m.groups()
        USER_NAMES.append(groups[0])
        FLOWCELLS.append(groups[1])
        FASTQS.append(groups[2])

sll_substring = re.compile(r'(?P<file_base>P\w+)_[12]')
SLL_NAMES = [ sll_substring.search(x).groups()[0] for x in FASTQS ]
USER_NAMES = [ os.path.basename(x) for x in USER_NAMES ]

def find_files(wildcards):
    files = glob.glob('{wildcards.user_name}/*/*_{wildcards.sll_name}_[12].fastq.gz'.format(wildcards=wildcards))
    return files


rule all:
    #input: expand("02_trimmed/{user_name}-{sll_name}-trimmed.fastq", zip, user_name=USER_NAMES, sll_name=SLL_NAMES)
    #input: ["stacks/03_process_radtags/{}-{}-trimmed.fastq".format(user_name, sll_name) for user_name, sll_name in zip(USER_NAMES, SLL_NAMES)]
    input: ["stacks/04_ustacks/{}-{}-trimmed.fastq".format(user_name, sll_name) for user_name, sll_name in zip(USER_NAMES, SLL_NAMES)]
    #input: "stacks/03_process_radtags/{sample}.fastq"


rule merge_reads:
    input: find_files
    output: "stacks/01_merged/{user_name}-{sll_name}.fastq.gz"
    #log: "stacks/01_merged/merge.log"
    run:
        # Each input is made up of two files (paired-end reads); need to be handled separately
        for input_file in input:
            #shell("cat {input_file} >> {output} 2>>{log}")
            shell("cat {input_file} >> {output}")

rule trim_files:
    input: "stacks/01_merged/{sample}.fastq.gz"
    output: 
        keep="stacks/02_trimmed/{sample}-trimmed.fastq",
        discard="stacks/02_trimmed/trimmed-discarded/{sample}-trimmed-discarded.fastq"
    log: "stacks/02_trimmed/{sample}.log"
    shell:
        """
        #module load bioinfo-tools
        #module load cutadapt
        cutadapt -a CTCTTCCGATCT {input} --untrimmed-output {output.keep} --overlap 5 -o {output.discard} 2>&1 > {log}
        """

rule process_radtags:
    input: "stacks/02_trimmed/{sample}.fastq"
    output:
        retained="stacks/03_process_radtags/{sample}.fq",
    log: "stacks/03_process_radtags/serial_process.log"
    run:
        output_dir = os.path.split(str(output.retained))[0]
        #shell("module load bioinfo-tools")
        #shell("module load Stacks")
        shell("process_radtags -c -q --filter_illumina -r -e ecoRI -i fastq "
              "-f {input} -o {output_dir} -D 2>>{log}")
        #shell("mv {output.discards_ihatestacks} {output.discards}")

#rule process_radtags_organize:
#    input:
#        sample="stacks/03_process_radtags/{sample}.fastq",
#        discards="stacks/03_process_radtags/{sample}.fastq.discards"
#    output:
#        sample="stacks/03_process_radtags/{sample}-PR.fastq",
#        discards="stacks/03_process_radtags/discards/{sample}.fastq.discards"
#    shell:
#        """
#        mv {input.sample} {output.sample}
#        mv {input.discards} {output.discards}
#        """

rule ustacks:
    input: "stacks/03_process_radtags/{sample}.fq"
    output: "stacks/04_ustacks/{sample}.fastq"
    log: "stacks/04_ustacks/ustacks.log"
    run:
        output_dir = os.path.split(str(output))[0]
        for index, input_file in enumerate(input):
            shell(("ustacks -p 16 -t fastq -f {input} -o {output} -m 5 "
                   "-M 2 -N 4 -i {index} 2>>{log}"))
